mutinformation(x,y,method = "emp")
mutinformation(x,y,method = "mm")
install.packages("entropy")
library("entropy", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
xy = matrix(0,5,2)
View(xy)
xy[,1] = x
xy[,2] = y
mi.plugin(xy)
mutinformation(c(1,2,3,4,5), c(5,3,4,6,7))
xy = matrix(0,5,2)
xy[,1] = c(1,2,3,4,5)
xy[,2] = c(5,3,4,6,7)
mi.plugin(xy)
xy = matrix(0,5,2)
xy[,1] = x
xy[,2] = y
mi.plugin(xy)
mi.plugin(xy, unit = "log")
View(xy)
mi.plugin(xy, unit = "log2")
mi.plugin(xy, unit = "log10")
mutinformation(xy)
mutinformation(x,y)
mutinformation(x,y, method = "emp")
x = c()
y = c()
x[1] = 1;
x[2] = 0;
x[3] = 1;
x[4] = 1;
x[5] = 1;
y[1] = 1;
y[2] = 0;
y[3] = 0;
y[4] = 1;
y[5] = 1;
xy = matrix(0,5,2)
xy[,1] = x
xy[,2] = y
mi.plugin(xy, unit = "log10")
mutinformation(x,y, method = "emp")
mi.plugin(xy, unit = "log")
mi.plugin(xy, unit = "log2")
x = c()
y = c()
x[1] = 1;
x[2] = 0;
x[3] = 1;
x[4] = 1;
x[5] = 1;
y[1] = 1;
y[2] = 0;
y[3] = 0;
y[4] = 1;
y[5] = 1;
xy = matrix(0,5,2)
xy[,1] = x
xy[,2] = y
mi.plugin(xy, unit = "log2")
mutinformation(x,y, method = "emp")
x = c()
y = c()
x[1] = 1;
x[2] = 0;
x[3] = 1;
x[4] = 1;
x[5] = 1;
y[1] = 1;
y[2] = 0;
y[3] = 0;
y[4] = 1;
y[5] = 1;
xy = matrix(0,5,2)
xy[,1] = x
xy[,2] = y
mi.plugin(xy, unit=c("log", "log2", "log10"))
mutinformation(x,y, method = "emp")
mi.plugin(xy, unit=c("log2", "log10"))
mi.plugin(xy, unit = "log2")
mi.plugin(xy, unit = "log")
mi.plugin(xy, unit = "log10")
xy = cbind(x,y)
x = c(1,0,1,1,1)
y = c(1,0,0,1,1)
xy = cbind(x,y)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( c(0.2, 0.1, 0.15), c(0.1, 0.2, 0.25) )
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( c(0.2, 0.2, 0.6), c(0.1, 0.4, 0.5) )
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
mi.plugin(freqs2d, unit = "log")
mi.plugin(freqs2d, unit = "log2")
mi.plugin(freqs2d, unit = "log10")
x = c(0, 0.0714286, 0.142857, 0.214286, 0.285714, 0.357143, 0.428571, 0.5, 0.571429, 0.642857, 0.714286, 0.785714, 0.857143, 0.928571, 1)
y = c(0, 0.85326, -0.832071, 0.648169, 0.719598, -0.617785, 1.2104, 0.5, -0.210403, 1.61779, 0.280402, 0.351831, 1.83207, 0.14674, 1)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( x,y )
# corresponding mutual information
mi.plugin(freqs2d, unit = "log10")
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( x,y )
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
mutinformation(x,y)
x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(1/15,1/15,3/15)
np = c(1/15,4/15,5/15)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
View(freqs2d)
sum(freqs2d)
mutinformation(x,y)
y = c(1, 1, 1, 0, 0);
x = (1, 0, 1, 1, 0);
mutinformation(x,y)
y = c(1, 1, 1, 0, 0)
x = (1, 0, 1, 1, 0)
mutinformation(x,y)
y = c(1, 1, 1, 0, 0)
x = c(1, 0, 1, 1, 0)
mutinformation(x,y)
x = c(1,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(x,y)
x = c(3,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(x,y)
x = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(x,y)
ccc = c()
tem  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, i)
ccc
ccc = c()
tem  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in as.numeric(strsplit(tem, " ")))
ccc = append(ccc, i)
ccc = c()
tem  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
ccc2 = c()
tem2 = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
mutinformation(ccc,ccc2)
ccc = c()
ccc2 = c()
atttt  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
calsss = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc2 = append(ccc2, as.numeric(i))
mutinformation(ccc,ccc2)
ccc = c()
ccc2 = c()
atttt  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
calsss = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc2 = append(ccc2, as.numeric(i))
#x = c(3,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
#x = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
#y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(ccc,ccc2)
ccc = c()
ccc2 = c()
atttt  = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
calsss = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc2 = append(ccc2, as.numeric(i))
#x = c(3,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
#x = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
#y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(ccc,ccc2)
pp = c(1/15,1/15,3/15)
np = c(1/15,4/15,5/15)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
rowSums(freqs2d)
Px = rowSums(freqs2d)
Py = colSums(freqs2d)
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(1/15,1/15,3/15,0,0)
np = c(1/15,4/15,5/15,0,0)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
dim(freqs2d)
Px
Py
n
m
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
ccc
pp = c(0.2, 0.133333, 0, 0, 0)
np = c(0, 0.0666667, 0.2, 0.2, 0.2)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
h1
H1
H2
H12
rowSums(freqs2d)
colSums(freqs2d)
cat(ccc, sep = ",")
cat(ccc2, sep = ",")
pp = c(2/15, 3/15, 0, 0, 0)
np = c(5/15, 5/15, 0, 0, 0.2)
load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
# x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
x = c(1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(2/15, 3/15, 0, 0, 0)
np = c(5/15, 5/15, 0, 0, 0)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
# x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
x = c(1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(2/15, 3/15)
np = c(5/15, 5/15)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
system("ls", intern = TRUE)
system("time ls", intern = TRUE)
system("time ls", intern = TRUE, input = "esr")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
system("time ls", intern = TRUE, input = "esr")
system("time ls", intern = TRUE, input = "esr")
system2("time ls", stdout = "esr")
system2("ls", stdout = "esr")
system2("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
system2("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system2("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system2("time ./mule_Mth ", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system2("time ./mule_Mth", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system2("./mule_Mth", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system2("time ./mule_Mth", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt"
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz)
sink(zz, type = "message")
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz)
sink(zz, type = "message")
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz)
sink(zz, type = "message")
sink(type = "message")
sink()
zz <- file("all.Rout", open = "wt")
sink(zz)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz, type = "message")
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
con <- file("test.log")
sink(con, append=TRUE)
sink(con, append=TRUE, type="message")
# This will echo all input and not truncate 150+ character lines...
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
# Restore output to console
sink()
sink(type="message")
# And look at the log...
cat(readLines("test.log"), sep="\n")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all", open = "wt")
sink(zz)
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
sink("all.txt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink()
sink("all.txt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
sink("all.txt", append = FALSE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
f = readLines("typescript")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
f = readLines("typescript")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
f = readLines("Makefile")
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
out <- capture.output(summary(my_very_time_consuming_regression))
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
out <- capture.output(summary(my_very_time_consuming_regression))
cat("My title", out, file="summary_of_my_very_time_consuming_regression.txt", sep="n", append=TRUE)
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
out <- capture.output(file = "t.txt")
cat("My title", out, file="t.txt", sep="n", append=TRUE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
cat(file = "tt.txt", system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2"))
savehistory(file = "his.txt")
