np = c(1/15,4/15,5/15)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
View(freqs2d)
sum(freqs2d)
mutinformation(x,y)
y = c(1, 1, 1, 0, 0);
x = (1, 0, 1, 1, 0);
mutinformation(x,y)
y = c(1, 1, 1, 0, 0)
x = (1, 0, 1, 1, 0)
mutinformation(x,y)
y = c(1, 1, 1, 0, 0)
x = c(1, 0, 1, 1, 0)
mutinformation(x,y)
x = c(1,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(x,y)
x = c(3,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(x,y)
x = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(x,y)
ccc = c()
tem  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, i)
ccc
ccc = c()
tem  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in as.numeric(strsplit(tem, " ")))
ccc = append(ccc, i)
ccc = c()
tem  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
ccc2 = c()
tem2 = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
mutinformation(ccc,ccc2)
ccc = c()
ccc2 = c()
atttt  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
calsss = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc2 = append(ccc2, as.numeric(i))
mutinformation(ccc,ccc2)
ccc = c()
ccc2 = c()
atttt  = "1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
calsss = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc2 = append(ccc2, as.numeric(i))
#x = c(3,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
#x = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
#y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(ccc,ccc2)
ccc = c()
ccc2 = c()
atttt  = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
for(i in strsplit(tem, " "))
ccc = append(ccc, as.numeric(i))
calsss = "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 0 0"
for(i in strsplit(tem, " "))
ccc2 = append(ccc2, as.numeric(i))
#x = c(3,1,1,1,1,3,3,3,3,3,3,3,3,3,3)
#x = c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
#y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
mutinformation(ccc,ccc2)
pp = c(1/15,1/15,3/15)
np = c(1/15,4/15,5/15)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
rowSums(freqs2d)
Px = rowSums(freqs2d)
Py = colSums(freqs2d)
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(1/15,1/15,3/15,0,0)
np = c(1/15,4/15,5/15,0,0)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
dim(freqs2d)
Px
Py
n
m
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
ccc
pp = c(0.2, 0.133333, 0, 0, 0)
np = c(0, 0.0666667, 0.2, 0.2, 0.2)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
h1
H1
H2
H12
rowSums(freqs2d)
colSums(freqs2d)
cat(ccc, sep = ",")
cat(ccc2, sep = ",")
pp = c(2/15, 3/15, 0, 0, 0)
np = c(5/15, 5/15, 0, 0, 0.2)
load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
# x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
x = c(1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(2/15, 3/15, 0, 0, 0)
np = c(5/15, 5/15, 0, 0, 0)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
# x = c(1,2,3,3,3,1,2,2,2,2,3,3,3,3,3)
x = c(1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2)
y = c(0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
pp = c(2/15, 3/15)
np = c(5/15, 5/15)
# load entropy library
library("entropy")
# joint distribution of two discrete variables
freqs2d = rbind( pp,np)
# corresponding mutual information
mi.plugin(freqs2d)
# MI computed via entropy
H1 = entropy.plugin(rowSums(freqs2d))
H2 = entropy.plugin(colSums(freqs2d))
H12 = entropy.plugin(freqs2d)
H1+H2-H12
n = dim(freqs2d)[1]
m = dim(freqs2d)[2]
MI = 0
for (i in 1:n){
for(j in 1:m){
MI = MI + (freqs2d[i,j] * log(freqs2d[i,j] / (Px[i] * Py[j] )))
}
}
MI
system("ls", intern = TRUE)
system("time ls", intern = TRUE)
system("time ls", intern = TRUE, input = "esr")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
system("time ls", intern = TRUE, input = "esr")
system("time ls", intern = TRUE, input = "esr")
system2("time ls", stdout = "esr")
system2("ls", stdout = "esr")
system2("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
system2("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system2("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system2("time ./mule_Mth ", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system2("time ./mule_Mth", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system2("./mule_Mth", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system2("time ./mule_Mth", args = c("../../data/hs_datasetSup10SummaryGraphS1.txt", "../../data/hs_datasetSup10AttributeMatrix.txt",  "res1.txt", 18, 8, 2) ,stdout = "esr")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", stdout = "esr")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt"
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz)
sink(zz, type = "message")
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz)
sink(zz, type = "message")
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz)
sink(zz, type = "message")
sink(type = "message")
sink()
zz <- file("all.Rout", open = "wt")
sink(zz)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink(zz, type = "message")
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
con <- file("test.log")
sink(con, append=TRUE)
sink(con, append=TRUE, type="message")
# This will echo all input and not truncate 150+ character lines...
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
# Restore output to console
sink()
sink(type="message")
# And look at the log...
cat(readLines("test.log"), sep="\n")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all.Rout", open = "wt")
sink(zz)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
zz <- file("all", open = "wt")
sink(zz)
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
sink("all.txt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2", ignore.stdout = FALSE, input = "esr2")
sink()
sink("all.txt")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
sink("all.txt", append = FALSE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
f = readLines("typescript")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
f = readLines("typescript")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
f = readLines("Makefile")
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
out <- capture.output(summary(my_very_time_consuming_regression))
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
out <- capture.output(summary(my_very_time_consuming_regression))
cat("My title", out, file="summary_of_my_very_time_consuming_regression.txt", sep="n", append=TRUE)
sink("all.txt", append = FALSE)
f
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
sink()
out <- capture.output(file = "t.txt")
cat("My title", out, file="t.txt", sep="n", append=TRUE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2")
cat(file = "tt.txt", system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2"))
savehistory(file = "his.txt")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
f = readLines("his.txt")
gr = grep("real\t", f, value = TRUE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2 > V1")
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2 > V1", show.output.on.console = TRUE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2 > V1", ignore.stderr = FALSE)
system("time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2 > V1 2> time_results1")
system("(time ./mule_Mth ../../data/hs_datasetSup10SummaryGraphS1.txt ../../data/hs_datasetSup10AttributeMatrix.txt  res1.txt 18 8 2) > V1 2> time_results1")
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
f = readLines("time_results")
gr = grep("real\t", f, value = TRUE)
d1 = strsplit(, "\t")[[1]][2]
f
gr
d1 = strsplit(gr, "\t")[[1]][2]
mins = strsplit(d1, "m")[[1]][1]
d2 = strsplit(d1, "m")[[1]][2]
secs = strsplit(d2, "s")[[1]][1]
total_time = as.numeric(mins) * 60 + as.numeric(secs)
total_time
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
threads = c(1,4,8)
minsup = c(10)
rows = length(minsup)
cols = length(threads) +1
X = matrix(0, rows, cols)
colnames(X) <-c("FileName", "1 Thread", "4 Threads", "8 Threads")
for (seed in seq(from = 10, to = 20, by = 10)) {
for (dense in seq(from = 0.4, to = 0.45, by = 0.05)) {
for (freq in seq(from = 40, to = 60, by = 20)) {
row_val = 1
for (v in minsup){
outfile = paste("results/res.txt", sep = "")
col_val = 1
X[row_val, col_val] = outfile
for(t in threads){
fileG = paste("../../data/random graphs/randomAttributes_seed_", seed, "_dense_", dense,"_freq_",freq, ".txt", sep = "")
fileAtt  = paste("../../data/random graphs/randomGraph_seed_", seed, "_dense_", dense, "_freq_",freq,".txt", sep = "")
command = paste("(time ./mule_MTh ", fileG, " ",fileAtt, " ", outfile, " ", v, " ", t, " ", 2,") 2> time_results", sep = "")
cat(command)
cat("\n")
system(command)
col_val = col_val +1
f = readLines("time_results")
gr = grep("real\t", f, value = TRUE)
d1 = strsplit(gr, "\t")[[1]][2]
mins = strsplit(d1, "m")[[1]][1]
d2 = strsplit(d1, "m")[[1]][2]
secs = strsplit(d2, "s")[[1]][1]
total_time = as.numeric(mins) * 60 + as.numeric(secs)
X[row_val, col_val] = total_time
}
row_val = row_val+ 1
}
write.csv(X, "GF_result.csv", quote = FALSE)
}
}
}
fileG
cat(fileG)
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
threads = c(1,4,8)
minsup = c(10)
rows = length(minsup)
cols = length(threads) +1
X = matrix(0, rows, cols)
colnames(X) <-c("FileName", "1 Thread", "4 Threads", "8 Threads")
for (seed in seq(from = 10, to = 20, by = 10)) {
for (dense in seq(from = 0.4, to = 0.45, by = 0.05)) {
for (freq in seq(from = 40, to = 60, by = 20)) {
row_val = 1
for (v in minsup){
outfile = paste("results/res.txt", sep = "")
col_val = 1
X[row_val, col_val] = outfile
for(t in threads){
fileG = paste("../../data/randomGraphs/randomAttributes_seed_", seed, "_dense_", dense,"_freq_",freq, ".txt", sep = "")
fileAtt  = paste("../../data/randomGraphs/randomGraph_seed_", seed, "_dense_", dense, "_freq_",freq,".txt", sep = "")
command = paste("(time ./mule_MTh ", fileG, " ",fileAtt, " ", outfile, " ", v, " ", t, " ", 2,") 2> time_results", sep = "")
cat(command)
cat("\n")
system(command)
col_val = col_val +1
f = readLines("time_results")
gr = grep("real\t", f, value = TRUE)
d1 = strsplit(gr, "\t")[[1]][2]
mins = strsplit(d1, "m")[[1]][1]
d2 = strsplit(d1, "m")[[1]][2]
secs = strsplit(d2, "s")[[1]][1]
total_time = as.numeric(mins) * 60 + as.numeric(secs)
X[row_val, col_val] = total_time
}
row_val = row_val+ 1
}
write.csv(X, "GF_result.csv", quote = FALSE)
}
}
}
clear
setwd("/Users/eihabsalah/research/dm/CPP/Algorithms/Mule_MTh/Mule_MTh/")
threads = c(1,4,8)
minsup = c(10)
rows = length(minsup)
cols = length(threads) +1
X = matrix(0, rows, cols)
colnames(X) <-c("FileName", "1 Thread", "4 Threads", "8 Threads")
for (seed in seq(from = 10, to = 20, by = 10)) {
for (dense in seq(from = 0.4, to = 0.45, by = 0.05)) {
for (freq in seq(from = 40, to = 60, by = 20)) {
row_val = 1
for (v in minsup){
outfile = paste("results/res.txt", sep = "")
col_val = 1
X[row_val, col_val] = outfile
for(t in threads){
fileG = paste("../../data/randomGraphs/randomAttributes_seed_", seed, "_dense_", dense,"_freq_",freq, ".txt", sep = "")
fileAtt  = paste("../../data/randomGraphs/randomGraph_seed_", seed, "_dense_", dense, "_freq_",freq,".txt", sep = "")
command = paste("(time ./mule_MTh ", fileG, " ",fileAtt, " ", outfile, " ", v, " ", t, " ", 2,") 2> time_results", sep = "")
cat(command)
cat("\n")
system(command)
col_val = col_val +1
f = readLines("time_results")
gr = grep("real\t", f, value = TRUE)
d1 = strsplit(gr, "\t")[[1]][2]
mins = strsplit(d1, "m")[[1]][1]
d2 = strsplit(d1, "m")[[1]][2]
secs = strsplit(d2, "s")[[1]][1]
total_time = as.numeric(mins) * 60 + as.numeric(secs)
X[row_val, col_val] = total_time
}
row_val = row_val+ 1
}
write.csv(X, "GF_result.csv", quote = FALSE)
}
}
}
cat(command)
v
